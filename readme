# 🧾 Multi-Tenant Expense Management API

A secure, scalable, multi-tenant Expense Management API built with Laravel 10+. Supports company-specific user management, role-based access control (RBAC), expense tracking, audit logging, job queues (Redis), and scheduled weekly reports.

---

## 🚀 Features

- 🔐 **API Authentication** using Laravel Sanctum
- 🏢 **Multi-Tenant Architecture** — each user belongs to a company
- 👥 **Role-Based Access Control (RBAC)** — Admin, Manager, Employee
- 📊 **Expense Management** — create, update, delete, and view expenses per company
- 📜 **Audit Logging** — logs updates for accountability
- ⏰ **Queued Jobs** — Redis-powered queue for background tasks
- 🗓️ **Scheduled Tasks** — weekly expense report dispatch to company admins
- 📬 **Email Notifications** — admin reports via Mailpit (or configured SMTP)
- ⚙️ **API Testing** — Postman collection included for easy testing

---

## 📦 Tech Stack

- **Laravel 10+**
- **Sanctum** for API authentication
- **MySQL** for data storage
- **Redis** for queue management
- **Mailpit** (or any SMTP) for testing emails
- **Postman** for API testing

---

## 📂 Project Structure
app/ ├── Http/ │ └── Controllers/ │ ├── Api/ │ │ └── AuthController.php │ │ └── ExpenseController.php │ │ └── ... ├── Jobs/ │ └── SendWeeklyExpenseReport.php ├── Models/ │ └── Company.php │ └── Expense.php │ └── User.php │ └── AuditLog.php └── ... routes/ └── api.php


## ⚙️ Installation

```bash
git clone https://github.com/yourname/multi-tenant-expense-management.git
cd multi-tenant-expense-management
composer install
cp .env.example .env
php artisan key:generate
php artisan migrate --seed
```

### Start Redis
```bash```
```
brew services start redis
```

### Run Queue Worker
In your Terminal, run

```bash```
```
php artisan schedule:run
```

## 🔑 API Authentication (Sanctum)
- Login via /api/login to receive a token
- Pass token in Authorization header as Bearer {token} for protected routes

## 📗 API Endpoints Overview
Method	Endpoint	Description
- `POST	/api/login` →	User login
- `POST	/api/register` →	Admin registers new user
- `GET /api/users` → List users (Admins only)
- `POST /api/users` → Add user (Admins only)
- `PUT /api/users/{id}` → Update user role (Admins only)
- `GET /api/expenses` → List (by company, paginated, searchable by title/category)
- `POST /api/expenses` → Create (restricted to logged-in user’s company)
- `PUT /api/expenses/{id}` → Update (Managers & Admins only)
- `DELETE /api/expenses/{id}` → Delete (Admins only)


## 📊 Audit Logging
Every expense update logs:
- old values
- new values
- user_id
- company_id
- action (e.g. update)

Stored in audit_logs table.


## 📈 Weekly Report Job
Fetches expenses for each company from past 7 days
- Calculates total
- Emails report to all Admins in the company
- Runs via Laravel Scheduler


## 📝 License
MIT

## 👨‍💻 Author
Jonathan Audu @https://github.com/JonathanAudu

