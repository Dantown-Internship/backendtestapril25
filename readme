# ðŸ§¾ Multi-Tenant SaaS-Based Expense Management API

## Overview

This project is a **Multi-Tenant SaaS-based Expense Management System** that allows multiple companies to manage their expenses independently through a robust API. It includes secure API authentication, role-based access control, and other features listed below.

---
## Features

- **Multi-Tenant Support** â€“ Complete data isolation between companies
- **Secure API Authentication** â€“ Token-based auth with Laravel Sanctum.
- **Role-Based Access Control (RBAC)** â€“ Admin, Manager, and Employee roles
- **Advanced Query Optimization** â€“ Database indexing & eager loading using MySQL
- **Background Job Processing** â€“ Automated weekly expense reports
- **Audit Logging** â€“ Track changes to expense records.
- **Redis Caching** High-performance response times
  
---
## Technologies Used

- PHP 8.4.6 
- Laravel 12.9.0 and 
- MySQL version 9.0.0
- Composer 2.8.8
    
---
## Database Setup

This application uses the following database structure:

- **companies** - Stores company information
- **users** - Stores user information with company association
- **expenses** - Stores expense records
- **audit_logs** - Tracks changes to expenses
- **jobs** - For queue processing

---
## Authentication

- Laravel Sanctum for token-based authentication.
- Register or login to receive a token
- Include the token in the Authorization header.

---
## Role-Based Permissions

- `Admin:` â†’ Full access to all resources
- `Manager:` â†’ Can manage expenses but not users
- `Employee:` â†’ Can view and create their own expenses

---
## API Endpoints

#### **Authentication Routes:**

- `POST /api/register:` â†’ This is restricted to Admins only. Admins can create new users. (Done with middleware('role:Admin'))

- `POST /api/login:` â†’ This allows everyone to log in, regardless of their role.

- `POST /api/logout:` â†’ This is for logging out the authenticated user (uses Sanctum's token-based authentication).

#### **Expense Management:**

- `GET /api/expenses:` â†’ Allows Admins, Managers, and Employees to view expenses. The ExpenseController@index method will be responsible for fetching expenses, ensuring they are filtered by company (using auth()->user()->company_id).

The list will be paginated and searchable by title/category, as specified.

- `POST /api/expenses:` â†’ Allows Admins, Managers, and Employees to create an expense. The ExpenseController@store method ensures the expense is linked to the authenticated user's company.

- `PUT /api/expenses/{id}:` â†’ Allows Admins and Managers to update expenses (as you mentioned).

- `DELETE /api/expenses/{id}:` â†’ Allows only Admins to delete an expense.

#### **User Management:**

- `GET /api/users:` â†’ Lists all users, restricted to Admins only.

- `POST /api/users:` â†’ Allows Admins only to add new users.

- `PUT /api/users/{id}:` â†’ Allows Admins only to update a user's role.

---
## To view API Endpoints from the commandline, run:

    php artisan route:list

---
## Relationships

- A **Company** has many **Users**
- A **User** belongs to a **Company**
- A **User** has many **Expenses**